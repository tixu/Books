// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authors.proto

/*
Package authors is a generated protocol buffer package.

It is generated from these files:
	authors.proto

It has these top-level messages:
	AuthorRequest
	Author
*/
package authors

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthorRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AuthorRequest) Reset()                    { *m = AuthorRequest{} }
func (m *AuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthorRequest) ProtoMessage()               {}
func (*AuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthorRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Author struct {
	Lastname  string `protobuf:"bytes,1,opt,name=lastname" json:"lastname,omitempty"`
	Firstname string `protobuf:"bytes,2,opt,name=firstname" json:"firstname,omitempty"`
	Year      int32  `protobuf:"varint,3,opt,name=year" json:"year,omitempty"`
	Country   string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
}

func (m *Author) Reset()                    { *m = Author{} }
func (m *Author) String() string            { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()               {}
func (*Author) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Author) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *Author) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *Author) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Author) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthorRequest)(nil), "AuthorRequest")
	proto.RegisterType((*Author)(nil), "Author")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Author service

type AuthorClient interface {
	GetAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*Author, error)
}

type authorClient struct {
	cc *grpc.ClientConn
}

func NewAuthorClient(cc *grpc.ClientConn) AuthorClient {
	return &authorClient{cc}
}

func (c *authorClient) GetAuthor(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := grpc.Invoke(ctx, "/author/getAuthor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Author service

type AuthorServer interface {
	GetAuthor(context.Context, *AuthorRequest) (*Author, error)
}

func RegisterAuthorServer(s *grpc.Server, srv AuthorServer) {
	s.RegisterService(&_Author_serviceDesc, srv)
}

func _Author_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/author/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServer).GetAuthor(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Author_serviceDesc = grpc.ServiceDesc{
	ServiceName: "author",
	HandlerType: (*AuthorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAuthor",
			Handler:    _Author_GetAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authors.proto",
}

func init() { proto.RegisterFile("authors.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0x2d, 0xc9,
	0xc8, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe7, 0xe2, 0x75, 0x04, 0x0b,
	0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x31, 0x65, 0xa6, 0x28, 0x15, 0x70, 0xb1, 0x41, 0x14, 0x08, 0x49, 0x71,
	0x71, 0xe4, 0x24, 0x16, 0x97, 0xe4, 0x25, 0xe6, 0xa6, 0x42, 0xe5, 0xe1, 0x7c, 0x21, 0x19, 0x2e,
	0xce, 0xb4, 0xcc, 0x22, 0xa8, 0x24, 0x13, 0x58, 0x12, 0x21, 0x20, 0x24, 0xc4, 0xc5, 0x52, 0x99,
	0x9a, 0x58, 0x24, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0x66, 0x0b, 0x49, 0x70, 0xb1, 0x27,
	0xe7, 0x97, 0xe6, 0x95, 0x14, 0x55, 0x4a, 0xb0, 0x82, 0xd5, 0xc3, 0xb8, 0x46, 0x06, 0x5c, 0x6c,
	0x10, 0x37, 0x0a, 0xa9, 0x71, 0x71, 0xa6, 0xa7, 0x96, 0x40, 0xad, 0xe7, 0xd3, 0x43, 0x71, 0xa8,
	0x14, 0x3b, 0x94, 0xaf, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x8b, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x6a, 0x8b, 0xcc, 0x76, 0xdc, 0x00, 0x00, 0x00,
}
